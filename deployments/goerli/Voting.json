{
  "address": "0xA67227C16b9a54F89acd36Af2B9Ab52Ba4a22793",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "VoterRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Voting.WorkflowStatus",
          "name": "previousStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum Voting.WorkflowStatus",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "WorkflowStatusChange",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_desc",
          "type": "string"
        }
      ],
      "name": "addProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "addVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endProposalsRegistering",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endVotingSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getOneProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Proposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getVoter",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "votedProposalId",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Voter",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "setVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startProposalsRegistering",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVotingSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tallyVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningProposalID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workflowStatus",
      "outputs": [
        {
          "internalType": "enum Voting.WorkflowStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c608fc405a8c940f6b102d95fd15c8770f329cf5f0a9d773a30b10ed7dbd324",
  "receipt": {
    "to": null,
    "from": "0xdAb8c779e7631241867aDB421Ba2d759a63d6b29",
    "contractAddress": "0xA67227C16b9a54F89acd36Af2B9Ab52Ba4a22793",
    "transactionIndex": 18,
    "gasUsed": "2116349",
    "logsBloom": "0x
    "blockHash": "0x77b58d1fc269f97b93b2e4fbb8e97b51bc6f075c54c9159d55bc48e5f9394871",
    "transactionHash": "0x1c608fc405a8c940f6b102d95fd15c8770f329cf5f0a9d773a30b10ed7dbd324",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 8412925,
        "transactionHash": "0x1c608fc405a8c940f6b102d95fd15c8770f329cf5f0a9d773a30b10ed7dbd324",
        "address": "0xA67227C16b9a54F89acd36Af2B9Ab52Ba4a22793",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dab8c779e7631241867adb421ba2d759a63d6b29"
        ],
        "data": "0x",
        "logIndex": 67,
        "blockHash": "0x77b58d1fc269f97b93b2e4fbb8e97b51bc6f075c54c9159d55bc48e5f9394871"
      }
    ],
    "blockNumber": 8412925,
    "cumulativeGasUsed": "10669877",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "e25f5883c174049a7c343f7656598282",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"VoterRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Voting.WorkflowStatus\",\"name\":\"previousStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum Voting.WorkflowStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"WorkflowStatusChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_desc\",\"type\":\"string\"}],\"name\":\"addProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endProposalsRegistering\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endVotingSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOneProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"internalType\":\"struct Voting.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getVoter\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votedProposalId\",\"type\":\"uint256\"}],\"internalType\":\"struct Voting.Voter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startProposalsRegistering\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVotingSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tallyVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningProposalID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workflowStatus\",\"outputs\":[{\"internalType\":\"enum Voting.WorkflowStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alyra voting contract correction\",\"details\":\"To run a vote, follow these steps: Owner addVoter(), startProposalRegistering(), Voter addProposal(),  Owner endProposalRegistering(), Owner startVotingSession(), Voter setVote(), Owner endVotingSession(), Owner tallyVotes \",\"kind\":\"dev\",\"methods\":{\"addProposal(string)\":{\"details\":\"Restricted to voters\",\"params\":{\"_desc\":\"of a the proposal\"}},\"addVoter(address)\":{\"details\":\"Restricted to the contract owner\",\"params\":{\"_addr\":\"of a person\"}},\"endProposalsRegistering()\":{\"details\":\"Restricted to the contract owner\"},\"endVotingSession()\":{\"details\":\"Restricted to the contract owner\"},\"getOneProposal(uint256)\":{\"details\":\"Restricted to voters\",\"params\":{\"_id\":\"of a proposal\"},\"returns\":{\"_0\":\"a proposal, which is a structure defined by 2 attributes: description & voteCount\"}},\"getVoter(address)\":{\"details\":\"Restricted to voters\",\"params\":{\"_addr\":\", Registered voter address\"},\"returns\":{\"_0\":\"a voter, which is a structure defined by 3 attributes: isRegistered, hasVoted & votedProposalId\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setVote(uint256)\":{\"details\":\"Restricted to voters\",\"params\":{\"_id\":\"of the proposal\"}},\"startProposalsRegistering()\":{\"details\":\"Restricted to the contract owner\"},\"startVotingSession()\":{\"details\":\"Restricted to the contract owner\"},\"tallyVotes()\":{\"details\":\"Restricted to the contract owner\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addProposal(string)\":{\"notice\":\"Add a proposal\"},\"addVoter(address)\":{\"notice\":\"Register a new voter\"},\"endProposalsRegistering()\":{\"notice\":\"End the proposal registration seesion\"},\"endVotingSession()\":{\"notice\":\"End the voting seesion\"},\"getOneProposal(uint256)\":{\"notice\":\"Get a specific proposal\"},\"getVoter(address)\":{\"notice\":\"Get a registered voter information\"},\"setVote(uint256)\":{\"notice\":\"Add a vote\"},\"startProposalsRegistering()\":{\"notice\":\"Start the proposal registration session\"},\"startVotingSession()\":{\"notice\":\"Start the voting seesion\"},\"tallyVotes()\":{\"notice\":\"Tally votes\"}},\"notice\":\"Only owner can register voters, go to the next status and tally votes. Voters can add a proposal, vote, see information about voters and about proposals\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VotingSystem.sol\":\"Voting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/VotingSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @notice Only owner can register voters, go to the next status and tally votes. Voters can add a proposal, vote, see information about voters and about proposals\\n/// @dev To run a vote, follow these steps: Owner addVoter(), startProposalRegistering(), Voter addProposal(), \\n/// Owner endProposalRegistering(), Owner startVotingSession(), Voter setVote(), Owner endVotingSession(), Owner tallyVotes \\n/// @author Alyra voting contract correction\\n\\ncontract Voting is Ownable {\\n\\n    uint public winningProposalID;\\n\\n    struct Voter {\\n        bool isRegistered;\\n        bool hasVoted;\\n        uint votedProposalId;\\n    }\\n\\n    struct Proposal {\\n        string description;\\n        uint voteCount;\\n    }\\n\\n    enum  WorkflowStatus {\\n        RegisteringVoters,\\n        ProposalsRegistrationStarted,\\n        ProposalsRegistrationEnded,\\n        VotingSessionStarted,\\n        VotingSessionEnded,\\n        VotesTallied\\n    }\\n\\n    WorkflowStatus public workflowStatus;\\n    Proposal[] proposalsArray;\\n    mapping (address => Voter) voters;\\n\\n\\n    event VoterRegistered(address voterAddress);\\n    event WorkflowStatusChange(WorkflowStatus previousStatus, WorkflowStatus newStatus);\\n    event ProposalRegistered(uint proposalId);\\n    event Voted (address voter, uint proposalId);\\n\\n    modifier onlyVoters() {\\n        require(voters[msg.sender].isRegistered, \\\"You're not a voter\\\");\\n        _;\\n    }\\n\\n    // ::::::::::::: GETTERS ::::::::::::: //\\n\\n    /// @notice Get a registered voter information\\n    /// @dev Restricted to voters\\n    /// @param _addr, Registered voter address\\n    /// @return a voter, which is a structure defined by 3 attributes: isRegistered, hasVoted & votedProposalId\\n    function getVoter(address _addr) external onlyVoters view returns (Voter memory) {\\n        return voters[_addr];\\n    }\\n\\n    /// @notice Get a specific proposal\\n    /// @dev Restricted to voters\\n    /// @param _id of a proposal\\n    /// @return a proposal, which is a structure defined by 2 attributes: description & voteCount\\n    function getOneProposal(uint _id) external onlyVoters view returns (Proposal memory) {\\n        return proposalsArray[_id];\\n    }\\n\\n    // ::::::::::::: REGISTRATION ::::::::::::: //\\n\\n    /// @notice Register a new voter\\n    /// @dev Restricted to the contract owner\\n    /// @param _addr of a person\\n    function addVoter(address _addr) external onlyOwner {\\n        require(workflowStatus == WorkflowStatus.RegisteringVoters, 'Voters registration is not open yet');\\n        require(voters[_addr].isRegistered != true, 'Already registered');\\n\\n        voters[_addr].isRegistered = true;\\n        emit VoterRegistered(_addr);\\n    }\\n\\n    // ::::::::::::: PROPOSAL ::::::::::::: //\\n\\n    /// @notice Add a proposal\\n    /// @dev Restricted to voters\\n    /// @param _desc of a the proposal\\n    function addProposal(string calldata _desc) external onlyVoters {\\n        require(workflowStatus == WorkflowStatus.ProposalsRegistrationStarted, 'Proposals are not allowed yet');\\n        require(keccak256(abi.encode(_desc)) != keccak256(abi.encode(\\\"\\\")), 'Vous ne pouvez pas ne rien proposer');\\n        require(proposalsArray.length <= 1000, \\\"You can't more proposals\\\"); // fixing the potential DoS\\n\\n        Proposal memory proposal;\\n        proposal.description = _desc;\\n        proposalsArray.push(proposal);\\n        emit ProposalRegistered(proposalsArray.length-1);\\n    }\\n\\n    // ::::::::::::: VOTE ::::::::::::: //\\n\\n    /// @notice Add a vote\\n    /// @dev Restricted to voters\\n    /// @param _id of the proposal\\n    function setVote( uint _id) external onlyVoters {\\n        require(workflowStatus == WorkflowStatus.VotingSessionStarted, 'Voting session havent started yet');\\n        require(voters[msg.sender].hasVoted != true, 'You have already voted');\\n        require(_id < proposalsArray.length, 'Proposal not found');\\n\\n        voters[msg.sender].votedProposalId = _id;\\n        voters[msg.sender].hasVoted = true;\\n        proposalsArray[_id].voteCount++;\\n\\n        emit Voted(msg.sender, _id);\\n    }\\n\\n    // ::::::::::::: STATE ::::::::::::: //\\n\\n    /// @notice Start the proposal registration session\\n    /// @dev Restricted to the contract owner\\n    function startProposalsRegistering() external onlyOwner {\\n        require(workflowStatus == WorkflowStatus.RegisteringVoters, 'Registering proposals cant be started now');\\n        workflowStatus = WorkflowStatus.ProposalsRegistrationStarted;\\n\\n        Proposal memory proposal;\\n        proposal.description = \\\"GENESIS\\\";\\n        proposalsArray.push(proposal);\\n\\n        emit WorkflowStatusChange(WorkflowStatus.RegisteringVoters, WorkflowStatus.ProposalsRegistrationStarted);\\n    }\\n\\n    /// @notice End the proposal registration seesion\\n    /// @dev Restricted to the contract owner\\n    function endProposalsRegistering() external onlyOwner {\\n        require(workflowStatus == WorkflowStatus.ProposalsRegistrationStarted, 'Registering proposals havent started yet');\\n        workflowStatus = WorkflowStatus.ProposalsRegistrationEnded;\\n        emit WorkflowStatusChange(WorkflowStatus.ProposalsRegistrationStarted, WorkflowStatus.ProposalsRegistrationEnded);\\n    }\\n\\n    /// @notice Start the voting seesion\\n    /// @dev Restricted to the contract owner\\n    function startVotingSession() external onlyOwner {\\n        require(workflowStatus == WorkflowStatus.ProposalsRegistrationEnded, 'Registering proposals phase is not finished');\\n        workflowStatus = WorkflowStatus.VotingSessionStarted;\\n        emit WorkflowStatusChange(WorkflowStatus.ProposalsRegistrationEnded, WorkflowStatus.VotingSessionStarted);\\n    }\\n\\n    /// @notice End the voting seesion\\n    /// @dev Restricted to the contract owner\\n    function endVotingSession() external onlyOwner {\\n        require(workflowStatus == WorkflowStatus.VotingSessionStarted, 'Voting session havent started yet');\\n        workflowStatus = WorkflowStatus.VotingSessionEnded;\\n        emit WorkflowStatusChange(WorkflowStatus.VotingSessionStarted, WorkflowStatus.VotingSessionEnded);\\n    }\\n\\n    /// @notice Tally votes\\n    /// @dev Restricted to the contract owner\\n   function tallyVotes() external onlyOwner {\\n       require(workflowStatus == WorkflowStatus.VotingSessionEnded, \\\"Current status is not voting session ended\\\");\\n       uint _winningProposalId;\\n      for (uint256 p = 0; p < proposalsArray.length; p++) {\\n           if (proposalsArray[p].voteCount > proposalsArray[_winningProposalId].voteCount) {\\n               _winningProposalId = p;\\n          }\\n       }\\n       winningProposalID = _winningProposalId;\\n\\n       workflowStatus = WorkflowStatus.VotesTallied;\\n       emit WorkflowStatusChange(WorkflowStatus.VotingSessionEnded, WorkflowStatus.VotesTallied);\\n    }\\n}\",\"keccak256\":\"0x915cf365672677da89d103fad2dbb88b9f7fc72d46854f089a836859720263a4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063a7bfab1611610097578063d4f50f9811610066578063d4f50f98146101ee578063ee74c6781461021e578063f2fde38b14610228578063f4ab9adf14610244576100f5565b8063a7bfab16146101b2578063bdc01431146101bc578063c7038a4e146101da578063c88af42f146101e4576100f5565b8063715018a6116100d3578063715018a61461013c5780638da5cb5b14610146578063a1edffa214610164578063a2788cce14610182576100f5565b8063230796ae146100fa5780632fdae3c514610116578063378a217814610132575b600080fd5b610114600480360381019061010f919061149b565b610260565b005b610130600480360381019061012b919061152d565b61055b565b005b61013a610828565b005b610144610995565b005b61014e6109a9565b60405161015b91906115bb565b60405180910390f35b61016c6109d2565b604051610179919061164d565b60405180910390f35b61019c6004803603810190610197919061149b565b6109e5565b6040516101a99190611744565b60405180910390f35b6101ba610b4c565b005b6101c4610c32565b6040516101d19190611775565b60405180910390f35b6101e2610c38565b005b6101ec610db3565b005b610208600480360381019061020391906117bc565b610e98565b6040516102159190611846565b60405180910390f35b610226610fc0565b005b610242600480360381019061023d91906117bc565b6110a6565b005b61025e600480360381019061025991906117bc565b611129565b005b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166102ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e6906118be565b60405180910390fd5b60036005811115610303576103026115d6565b5b600260009054906101000a900460ff166005811115610325576103246115d6565b5b14610365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035c90611950565b60405180910390fd5b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff161515036103fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f2906119bc565b60405180910390fd5b6003805490508110610442576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043990611a28565b60405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff021916908315150217905550600381815481106104f8576104f7611a48565b5b9060005260206000209060020201600101600081548092919061051a90611aa6565b91905055507f4d99b957a2bc29a30ebd96a7be8e68fe50a3c701db28a91436490b7d53870ca43382604051610550929190611aee565b60405180910390a150565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166105ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e1906118be565b60405180910390fd5b600160058111156105fe576105fd6115d6565b5b600260009054906101000a900460ff1660058111156106205761061f6115d6565b5b14610660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065790611b63565b60405180910390fd5b60405160200161066f90611ba9565b604051602081830303815290604052805190602001208282604051602001610698929190611c05565b60405160208183030381529060405280519060200120036106ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e590611c9b565b60405180910390fd5b6103e86003805490501115610738576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072f90611d07565b60405180910390fd5b61074061141c565b82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160000181905250600381908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190816107ce9190611f62565b506020820151816001015550507f92e393e9b54e2f801d3ea4beb0c5e71a21cc34a5d34b77d0fb8a3aa1650dc18f600160038054905061080e9190612034565b60405161081b9190611775565b60405180910390a1505050565b6108306112d2565b60046005811115610844576108436115d6565b5b600260009054906101000a900460ff166005811115610866576108656115d6565b5b146108a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089d906120da565b60405180910390fd5b600080600090505b60038054905081101561092457600382815481106108cf576108ce611a48565b5b906000526020600020906002020160010154600382815481106108f5576108f4611a48565b5b9060005260206000209060020201600101541115610911578091505b808061091c90611aa6565b9150506108ae565b50806001819055506005600260006101000a81548160ff02191690836005811115610952576109516115d6565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f6004600560405161098a9291906120fa565b60405180910390a150565b61099d6112d2565b6109a76000611350565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900460ff1681565b6109ed61141c565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610a7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a73906118be565b60405180910390fd5b60038281548110610a9057610a8f611a48565b5b9060005260206000209060020201604051806040016040529081600082018054610ab990611d85565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae590611d85565b8015610b325780601f10610b0757610100808354040283529160200191610b32565b820191906000526020600020905b815481529060010190602001808311610b1557829003601f168201915b505050505081526020016001820154815250509050919050565b610b546112d2565b60036005811115610b6857610b676115d6565b5b600260009054906101000a900460ff166005811115610b8a57610b896115d6565b5b14610bca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc190611950565b60405180910390fd5b6004600260006101000a81548160ff02191690836005811115610bf057610bef6115d6565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f60036004604051610c289291906120fa565b60405180910390a1565b60015481565b610c406112d2565b60006005811115610c5457610c536115d6565b5b600260009054906101000a900460ff166005811115610c7657610c756115d6565b5b14610cb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cad90612195565b60405180910390fd5b6001600260006101000a81548160ff02191690836005811115610cdc57610cdb6115d6565b5b0217905550610ce961141c565b6040518060400160405280600781526020017f47454e4553495300000000000000000000000000000000000000000000000000815250816000018190525060038190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000019081610d689190611f62565b506020820151816001015550507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f60006001604051610da89291906120fa565b60405180910390a150565b610dbb6112d2565b60016005811115610dcf57610dce6115d6565b5b600260009054906101000a900460ff166005811115610df157610df06115d6565b5b14610e31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2890612227565b60405180910390fd5b60028060006101000a81548160ff02191690836005811115610e5657610e556115d6565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f60016002604051610e8e9291906120fa565b60405180910390a1565b610ea0611436565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610f2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f26906118be565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016001820154815250509050919050565b610fc86112d2565b60026005811115610fdc57610fdb6115d6565b5b600260009054906101000a900460ff166005811115610ffe57610ffd6115d6565b5b1461103e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611035906122b9565b60405180910390fd5b6003600260006101000a81548160ff02191690836005811115611064576110636115d6565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f6002600360405161109c9291906120fa565b60405180910390a1565b6110ae6112d2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361111d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111149061234b565b60405180910390fd5b61112681611350565b50565b6111316112d2565b60006005811115611145576111446115d6565b5b600260009054906101000a900460ff166005811115611167576111666115d6565b5b146111a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119e906123dd565b60405180910390fd5b60011515600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615150361123d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123490612449565b60405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055507fb6be2187d059cc2a55fe29e0e503b566e1e0f8c8780096e185429350acffd3dd816040516112c791906115bb565b60405180910390a150565b6112da611414565b73ffffffffffffffffffffffffffffffffffffffff166112f86109a9565b73ffffffffffffffffffffffffffffffffffffffff161461134e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611345906124b5565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b604051806040016040528060608152602001600081525090565b6040518060600160405280600015158152602001600015158152602001600081525090565b600080fd5b600080fd5b6000819050919050565b61147881611465565b811461148357600080fd5b50565b6000813590506114958161146f565b92915050565b6000602082840312156114b1576114b061145b565b5b60006114bf84828501611486565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126114ed576114ec6114c8565b5b8235905067ffffffffffffffff81111561150a576115096114cd565b5b602083019150836001820283011115611526576115256114d2565b5b9250929050565b600080602083850312156115445761154361145b565b5b600083013567ffffffffffffffff81111561156257611561611460565b5b61156e858286016114d7565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115a58261157a565b9050919050565b6115b58161159a565b82525050565b60006020820190506115d060008301846115ac565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60068110611616576116156115d6565b5b50565b600081905061162782611605565b919050565b600061163782611619565b9050919050565b6116478161162c565b82525050565b6000602082019050611662600083018461163e565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156116a2578082015181840152602081019050611687565b60008484015250505050565b6000601f19601f8301169050919050565b60006116ca82611668565b6116d48185611673565b93506116e4818560208601611684565b6116ed816116ae565b840191505092915050565b61170181611465565b82525050565b6000604083016000830151848203600086015261172482826116bf565b915050602083015161173960208601826116f8565b508091505092915050565b6000602082019050818103600083015261175e8184611707565b905092915050565b61176f81611465565b82525050565b600060208201905061178a6000830184611766565b92915050565b6117998161159a565b81146117a457600080fd5b50565b6000813590506117b681611790565b92915050565b6000602082840312156117d2576117d161145b565b5b60006117e0848285016117a7565b91505092915050565b60008115159050919050565b6117fe816117e9565b82525050565b60608201600082015161181a60008501826117f5565b50602082015161182d60208501826117f5565b50604082015161184060408501826116f8565b50505050565b600060608201905061185b6000830184611804565b92915050565b600082825260208201905092915050565b7f596f75277265206e6f74206120766f7465720000000000000000000000000000600082015250565b60006118a8601283611861565b91506118b382611872565b602082019050919050565b600060208201905081810360008301526118d78161189b565b9050919050565b7f566f74696e672073657373696f6e20686176656e74207374617274656420796560008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b600061193a602183611861565b9150611945826118de565b604082019050919050565b600060208201905081810360008301526119698161192d565b9050919050565b7f596f75206861766520616c726561647920766f74656400000000000000000000600082015250565b60006119a6601683611861565b91506119b182611970565b602082019050919050565b600060208201905081810360008301526119d581611999565b9050919050565b7f50726f706f73616c206e6f7420666f756e640000000000000000000000000000600082015250565b6000611a12601283611861565b9150611a1d826119dc565b602082019050919050565b60006020820190508181036000830152611a4181611a05565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ab182611465565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611ae357611ae2611a77565b5b600182019050919050565b6000604082019050611b0360008301856115ac565b611b106020830184611766565b9392505050565b7f50726f706f73616c7320617265206e6f7420616c6c6f77656420796574000000600082015250565b6000611b4d601d83611861565b9150611b5882611b17565b602082019050919050565b60006020820190508181036000830152611b7c81611b40565b9050919050565b50565b6000611b93600083611861565b9150611b9e82611b83565b600082019050919050565b60006020820190508181036000830152611bc281611b86565b9050919050565b82818337600083830152505050565b6000611be48385611861565b9350611bf1838584611bc9565b611bfa836116ae565b840190509392505050565b60006020820190508181036000830152611c20818486611bd8565b90509392505050565b7f566f7573206e6520706f7576657a20706173206e65207269656e2070726f706f60008201527f7365720000000000000000000000000000000000000000000000000000000000602082015250565b6000611c85602383611861565b9150611c9082611c29565b604082019050919050565b60006020820190508181036000830152611cb481611c78565b9050919050565b7f596f752063616e2774206d6f72652070726f706f73616c730000000000000000600082015250565b6000611cf1601883611861565b9150611cfc82611cbb565b602082019050919050565b60006020820190508181036000830152611d2081611ce4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d9d57607f821691505b602082108103611db057611daf611d56565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611e187fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611ddb565b611e228683611ddb565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611e5f611e5a611e5584611465565b611e3a565b611465565b9050919050565b6000819050919050565b611e7983611e44565b611e8d611e8582611e66565b848454611de8565b825550505050565b600090565b611ea2611e95565b611ead818484611e70565b505050565b5b81811015611ed157611ec6600082611e9a565b600181019050611eb3565b5050565b601f821115611f1657611ee781611db6565b611ef084611dcb565b81016020851015611eff578190505b611f13611f0b85611dcb565b830182611eb2565b50505b505050565b600082821c905092915050565b6000611f3960001984600802611f1b565b1980831691505092915050565b6000611f528383611f28565b9150826002028217905092915050565b611f6b82611668565b67ffffffffffffffff811115611f8457611f83611d27565b5b611f8e8254611d85565b611f99828285611ed5565b600060209050601f831160018114611fcc5760008415611fba578287015190505b611fc48582611f46565b86555061202c565b601f198416611fda86611db6565b60005b8281101561200257848901518255600182019150602085019450602081019050611fdd565b8683101561201f578489015161201b601f891682611f28565b8355505b6001600288020188555050505b505050505050565b600061203f82611465565b915061204a83611465565b925082820390508181111561206257612061611a77565b5b92915050565b7f43757272656e7420737461747573206973206e6f7420766f74696e672073657360008201527f73696f6e20656e64656400000000000000000000000000000000000000000000602082015250565b60006120c4602a83611861565b91506120cf82612068565b604082019050919050565b600060208201905081810360008301526120f3816120b7565b9050919050565b600060408201905061210f600083018561163e565b61211c602083018461163e565b9392505050565b7f5265676973746572696e672070726f706f73616c732063616e7420626520737460008201527f6172746564206e6f770000000000000000000000000000000000000000000000602082015250565b600061217f602983611861565b915061218a82612123565b604082019050919050565b600060208201905081810360008301526121ae81612172565b9050919050565b7f5265676973746572696e672070726f706f73616c7320686176656e742073746160008201527f7274656420796574000000000000000000000000000000000000000000000000602082015250565b6000612211602883611861565b915061221c826121b5565b604082019050919050565b6000602082019050818103600083015261224081612204565b9050919050565b7f5265676973746572696e672070726f706f73616c73207068617365206973206e60008201527f6f742066696e6973686564000000000000000000000000000000000000000000602082015250565b60006122a3602b83611861565b91506122ae82612247565b604082019050919050565b600060208201905081810360008301526122d281612296565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612335602683611861565b9150612340826122d9565b604082019050919050565b6000602082019050818103600083015261236481612328565b9050919050565b7f566f7465727320726567697374726174696f6e206973206e6f74206f70656e2060008201527f7965740000000000000000000000000000000000000000000000000000000000602082015250565b60006123c7602383611861565b91506123d28261236b565b604082019050919050565b600060208201905081810360008301526123f6816123ba565b9050919050565b7f416c726561647920726567697374657265640000000000000000000000000000600082015250565b6000612433601283611861565b915061243e826123fd565b602082019050919050565b6000602082019050818103600083015261246281612426565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061249f602083611861565b91506124aa82612469565b602082019050919050565b600060208201905081810360008301526124ce81612492565b905091905056fea2646970667358221220a86cb5fe894d5b2f850d6c3e3053547e6a4efcf325f74b62c9600dc09ea7848a64736f6c63430008110033",
  "devdoc": {
    "author": "Alyra voting contract correction",
    "details": "To run a vote, follow these steps: Owner addVoter(), startProposalRegistering(), Voter addProposal(),  Owner endProposalRegistering(), Owner startVotingSession(), Voter setVote(), Owner endVotingSession(), Owner tallyVotes ",
    "kind": "dev",
    "methods": {
      "addProposal(string)": {
        "details": "Restricted to voters",
        "params": {
          "_desc": "of a the proposal"
        }
      },
      "addVoter(address)": {
        "details": "Restricted to the contract owner",
        "params": {
          "_addr": "of a person"
        }
      },
      "endProposalsRegistering()": {
        "details": "Restricted to the contract owner"
      },
      "endVotingSession()": {
        "details": "Restricted to the contract owner"
      },
      "getOneProposal(uint256)": {
        "details": "Restricted to voters",
        "params": {
          "_id": "of a proposal"
        },
        "returns": {
          "_0": "a proposal, which is a structure defined by 2 attributes: description & voteCount"
        }
      },
      "getVoter(address)": {
        "details": "Restricted to voters",
        "params": {
          "_addr": ", Registered voter address"
        },
        "returns": {
          "_0": "a voter, which is a structure defined by 3 attributes: isRegistered, hasVoted & votedProposalId"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setVote(uint256)": {
        "details": "Restricted to voters",
        "params": {
          "_id": "of the proposal"
        }
      },
      "startProposalsRegistering()": {
        "details": "Restricted to the contract owner"
      },
      "startVotingSession()": {
        "details": "Restricted to the contract owner"
      },
      "tallyVotes()": {
        "details": "Restricted to the contract owner"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addProposal(string)": {
        "notice": "Add a proposal"
      },
      "addVoter(address)": {
        "notice": "Register a new voter"
      },
      "endProposalsRegistering()": {
        "notice": "End the proposal registration seesion"
      },
      "endVotingSession()": {
        "notice": "End the voting seesion"
      },
      "getOneProposal(uint256)": {
        "notice": "Get a specific proposal"
      },
      "getVoter(address)": {
        "notice": "Get a registered voter information"
      },
      "setVote(uint256)": {
        "notice": "Add a vote"
      },
      "startProposalsRegistering()": {
        "notice": "Start the proposal registration session"
      },
      "startVotingSession()": {
        "notice": "Start the voting seesion"
      },
      "tallyVotes()": {
        "notice": "Tally votes"
      }
    },
    "notice": "Only owner can register voters, go to the next status and tally votes. Voters can add a proposal, vote, see information about voters and about proposals",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/VotingSystem.sol:Voting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 142,
        "contract": "contracts/VotingSystem.sol:Voting",
        "label": "winningProposalID",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 164,
        "contract": "contracts/VotingSystem.sol:Voting",
        "label": "workflowStatus",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(WorkflowStatus)161"
      },
      {
        "astId": 168,
        "contract": "contracts/VotingSystem.sol:Voting",
        "label": "proposalsArray",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(Proposal)154_storage)dyn_storage"
      },
      {
        "astId": 173,
        "contract": "contracts/VotingSystem.sol:Voting",
        "label": "voters",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Voter)149_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Proposal)154_storage)dyn_storage": {
        "base": "t_struct(Proposal)154_storage",
        "encoding": "dynamic_array",
        "label": "struct Voting.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(WorkflowStatus)161": {
        "encoding": "inplace",
        "label": "enum Voting.WorkflowStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Voter)149_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Voting.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)149_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)154_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Proposal",
        "members": [
          {
            "astId": 151,
            "contract": "contracts/VotingSystem.sol:Voting",
            "label": "description",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 153,
            "contract": "contracts/VotingSystem.sol:Voting",
            "label": "voteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Voter)149_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Voter",
        "members": [
          {
            "astId": 144,
            "contract": "contracts/VotingSystem.sol:Voting",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 146,
            "contract": "contracts/VotingSystem.sol:Voting",
            "label": "hasVoted",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 148,
            "contract": "contracts/VotingSystem.sol:Voting",
            "label": "votedProposalId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}